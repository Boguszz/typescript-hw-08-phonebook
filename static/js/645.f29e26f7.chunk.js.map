{"version":3,"file":"static/js/645.f29e26f7.chunk.js","mappings":"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","sources":["components/Filter/Filter.styled.ts","components/Filter/Filter.tsx","hooks/useFiltredContacts.ts","redux/contacts/contact-selectors.ts","hooks/usePagination.ts","hooks/useSorting.ts","components/Pagination/Pagination.styled.ts","components/Pagination/Pagination.tsx","components/DropDownList/DropDownList.styled.ts","components/DropDownList/DropDownList.tsx","components/ContactList/ContactList.styled.ts","components/ContactList/ContactList.tsx","components/AddButton/AddButton.styled.ts","components/AddButton/AddButton.tsx","pages/ContactsPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  margin-bottom: 50px;\n`;\n\nexport const Text = styled.p`\n  font-weight: 600;\n  color: var(--main-text-color);\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  width: 95%;\n  height: 40px;\n  padding: 0 10px 0 10px;\n\n  border: 1px solid var(--second-bg-color);\n  outline: none;\n\n  color: var(--main-text-color);\n  font-size: 14px;\n\n  :focus {\n    border-color: var(--accent-bg-color);\n  }\n\n  ::placeholder {\n    font-size: 12px;\n    color: var(--main-text-color);\n  }\n`;\n","import { Label, Text, Input } from './Filter.styled';\nimport { changeFilter } from 'redux/contacts/contacts-slice';\nimport { useAppDispatch } from 'hooks/useAppDispatch';\nimport React from 'react';\n\nconst Filter: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const changeFieldFilter = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <Label>\n      <Text>Find contacts by name</Text>\n      <Input type=\"text\" onChange={changeFieldFilter} name=\"filter\" />\n    </Label>\n  );\n};\n\nexport default Filter;\n","import { useGetContactsQuery } from 'redux/contacts/contact-api';\nimport { getFilter } from 'redux/contacts/contact-selectors';\nimport { useAppSelector } from './useAppSelector';\nimport { IContact } from 'types/IContact';\n\nconst useFiltredContacts = () => {\n  const { data } = useGetContactsQuery();\n  const filter = useAppSelector(state => getFilter(state));\n  const contacts = data?.data?.contacts;\n\n  const filtredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return (\n      contacts &&\n      contacts.filter((contact: { name: string }) =>\n        contact?.name?.toLowerCase().includes(normalizedFilter),\n      )\n    );\n  };\n\n  const filteredContactList: IContact[] = filtredContacts();\n\n  return { filteredContactList };\n};\n\nexport default useFiltredContacts;\n","import { RootState } from 'redux/store';\n\nexport const getFilter = (state: RootState) => state.contacts.filter;\n","import { useState, useEffect } from 'react';\nimport { IGap, IusePagination } from 'types/IPagination';\n\nconst usePagination = ({ contentPerPage, count }: IusePagination) => {\n  const [page, setPage] = useState(1);\n  const [gaps, setGaps] = useState<IGap>({\n    before: false,\n    paginationGroup: [],\n    after: true,\n  });\n  const [pagesInBetween, setPagesInBetween] = useState<number[]>([]);\n\n  const pageCount = Math.ceil(count / contentPerPage);\n  const lastContentIndex = page * contentPerPage;\n  const firstContentIndex = lastContentIndex - contentPerPage;\n\n  useEffect(() => {\n    if (pageCount > 2) {\n      const temp = new Array(pageCount - 2).fill(1).map((_, i) => i + 2);\n      setPagesInBetween(temp);\n    }\n  }, [pageCount]);\n\n  useEffect(() => {\n    const currentLocation = pagesInBetween.indexOf(page);\n    let paginationGroup = [];\n    let before = false;\n    let after = false;\n\n    if (page === 1) {\n      paginationGroup = pagesInBetween.slice(0, 3);\n    } else if (\n      page === pageCount ||\n      page === pageCount - 1 ||\n      page === pageCount - 2\n    ) {\n      paginationGroup = pagesInBetween.slice(-3, pageCount);\n    } else if (page === 2) {\n      paginationGroup = pagesInBetween.slice(\n        currentLocation,\n        currentLocation + 3,\n      );\n    } else {\n      paginationGroup = [page - 1, page, page + 1];\n    }\n\n    if (pageCount <= 5) {\n      before = false;\n      after = false;\n    } else {\n      before = false;\n      after = false;\n      if (paginationGroup[0] > 2) {\n        before = true;\n      }\n\n      if (paginationGroup[2] < pageCount - 1) {\n        after = true;\n      }\n    }\n    setGaps({ paginationGroup, before, after });\n  }, [page, pageCount, pagesInBetween]);\n\n  const changePage = (direction: boolean) => {\n    setPage(state => {\n      if (direction) {\n        if (state === pageCount) {\n          return state;\n        }\n        return state + 1;\n      } else {\n        if (state === 1) {\n          return state;\n        }\n        return state - 1;\n      }\n    });\n  };\n\n  const setPageSAFE = (num: number) => {\n    if (num > pageCount) {\n      setPage(pageCount);\n    } else if (num < 1) {\n      setPage(1);\n    } else {\n      setPage(num);\n    }\n  };\n\n  return {\n    totalPages: pageCount,\n    nextPage: () => changePage(true),\n    prevPage: () => changePage(false),\n    setPage: setPageSAFE,\n    firstContentIndex,\n    lastContentIndex,\n    page,\n    gaps,\n  };\n};\n\nexport default usePagination;\n","import { useState } from 'react';\nimport { IContact } from 'types/IContact';\n\nconst useSorting = (arr: IContact[]) => {\n  const [value, setValue] = useState<null | string>(null);\n  console.log(value);\n\n  const types = {\n    DATE_CREATION: 'Date creation',\n    ALPHABET_AZ: 'Alphabet A-Z',\n    ALPHABET_ZA: 'Alphabet Z-A',\n  };\n\n  const getValue = (value: string) => setValue(value);\n\n  const sort = () => {\n    switch (value) {\n      case types.DATE_CREATION:\n        return arr.sort((a, b) => (a.createdAt > b.createdAt ? -1 : 1));\n\n      case types.ALPHABET_AZ:\n        return arr.sort((a, b) => (a.name < b.name ? -1 : 1));\n\n      case types.ALPHABET_ZA:\n        return arr.sort((a, b) => (a.name > b.name ? -1 : 1));\n\n      default:\n        return;\n    }\n  };\n\n  return { sort, getValue };\n};\n\nexport default useSorting;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Button = styled.button<{ background?: string }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 30px;\n  height: 30px;\n  margin-right: 7px;\n\n  background-color: ${({ background }) =>\n    background ? background : 'var(--accent-bg-color)'};\n  color: var(--second-text-color);\n  font-family: inherit;\n  border: none;\n\n  cursor: pointer;\n  transition: opacity var(--main-hover-animation);\n  opacity: 1;\n\n  :hover,\n  :focus {\n    opacity: 0.7;\n  }\n\n  :last-child {\n    margin-right: 0;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 40px;\n    height: 40px;\n    margin-right: 15px;\n  }\n`;\n\nexport const Points = styled.p`\n  margin-right: 7px;\n\n  @media screen and (min-width: 768px) {\n    margin-right: 15px;\n  }\n`;\n","import { IPagination } from 'types/IPagination';\nimport { Button, Wrapper, Points } from './Pagination.styled';\nimport { HiArrowNarrowLeft, HiArrowNarrowRight } from 'react-icons/hi';\n\nconst Pagination: React.FC<IPagination> = ({\n  contentPerPage,\n  filteredContactList,\n  prevPage,\n  page,\n  setPage,\n  gaps,\n  totalPages,\n  nextPage,\n}) => {\n  return (\n    <Wrapper>\n      <Button onClick={prevPage}>\n        <HiArrowNarrowLeft />\n      </Button>\n\n      {page === 1 ? (\n        <Button background=\"#000000\" onClick={() => setPage(1)}>\n          1\n        </Button>\n      ) : (\n        <Button onClick={() => setPage(1)}>1</Button>\n      )}\n\n      {gaps.before ? <Points>...</Points> : null}\n      {gaps.paginationGroup.map((el: number) =>\n        page === el ? (\n          <Button background=\"#000000\" onClick={() => setPage(el)} key={el}>\n            {el}\n          </Button>\n        ) : (\n          <Button onClick={() => setPage(el)} key={el}>\n            {el}\n          </Button>\n        ),\n      )}\n      {gaps.after ? <Points>...</Points> : null}\n\n      {page === totalPages ? (\n        <Button background=\"#000000\" onClick={() => setPage(totalPages)}>\n          {totalPages}\n        </Button>\n      ) : (\n        <Button onClick={() => setPage(totalPages)}>{totalPages}</Button>\n      )}\n\n      <Button onClick={nextPage}>\n        <HiArrowNarrowRight />\n      </Button>\n    </Wrapper>\n  );\n};\n\nexport default Pagination;\n","import styled from '@emotion/styled';\nimport { IWrapper } from 'types/IDropDownList';\n\nexport const Wrapper = styled.div<IWrapper>`\n  width: 100%;\n\n  border: 1px solid var(--second-bg-color);\n  color: var(--main-text-color);\n\n  cursor: default;\n  overflow: hidden;\n  z-index: 99;\n\n  @media screen and (max-width: 767px) {\n    margin-bottom: 30px;\n  }\n\n  @media screen and (min-width: 768px) {\n    position: absolute;\n    top: ${({ top }) => (top ? top : '')};\n    right: ${({ right }) => (right ? right : '')};\n    left: ${({ left }) => (left ? left : '')};\n    bottom: ${({ bottom }) => (bottom ? bottom : '')};\n\n    width: 270px;\n  }\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  padding: 10px;\n`;\n\nexport const Option = styled.div`\n  background-color: #fafafa;\n  padding: 10px;\n\n  transition: background var(--main-hover-animation),\n    color var(--main-hover-animation);\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    background: var(--accent-bg-color);\n    color: var(--second-text-color);\n  }\n`;\n","import { useState } from 'react';\nimport { IoMdArrowDropdown, IoMdArrowDropup } from 'react-icons/io';\n\nimport { IDropDownListState } from 'types/IDropDownList';\nimport { Wrapper, Header, Option } from './DropDownList.styled';\n\nconst DropDownList: React.FC<IDropDownListState> = ({\n  options,\n  label,\n  top,\n  bottom,\n  left,\n  right,\n  getValue,\n}) => {\n  const [option, setOption] = useState<null | string>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const selectOption = (e: React.MouseEvent<HTMLParagraphElement>) => {\n    const value = e.currentTarget.textContent;\n    setOption(value);\n    getValue(value as string);\n  };\n\n  const toogle = () => setIsOpen(prevState => !prevState);\n\n  return (\n    <Wrapper top={top} bottom={bottom} left={left} right={right}>\n      <div onClick={toogle}>\n        <Header>\n          <p>{option ? option : label}</p>\n          {isOpen ? <IoMdArrowDropup /> : <IoMdArrowDropdown />}\n        </Header>\n        {isOpen && (\n          <div>\n            {options.map(item => (\n              <Option key={item} onClick={selectOption}>\n                {item}\n              </Option>\n            ))}\n          </div>\n        )}\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default DropDownList;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const List = styled.ul`\n  width: 100%;\n`;\n\nexport const Item = styled.li`\n  margin-bottom: 20px;\n`;\n","import { useEffect } from 'react';\nimport { useGetContactsQuery } from 'redux/contacts/contact-api';\nimport useFiltredContacts from 'hooks/useFiltredContacts';\nimport usePagination from 'hooks/usePagination';\nimport useSorting from 'hooks/useSorting';\n\nimport Contact from 'components/Contact/Contact';\nimport Loader from 'components/Loader';\nimport NotFound from 'components/NotFound';\nimport Pagination from 'components/Pagination';\nimport DropDownList from 'components/DropDownList';\n\nimport { IContactList } from 'types/IContactList';\nimport { Wrapper, List, Item } from './ContactList.styled';\n\nconst ContactList: React.FC = () => {\n  const { filteredContactList } = useFiltredContacts();\n  const { isFetching, error, refetch } = useGetContactsQuery();\n  const { sort, getValue } = useSorting(filteredContactList);\n  const {\n    firstContentIndex,\n    lastContentIndex,\n    gaps,\n    nextPage,\n    page,\n    prevPage,\n    setPage,\n    totalPages,\n  } = usePagination({\n    contentPerPage: 10,\n    count: filteredContactList.length,\n  });\n\n  sort();\n\n  useEffect(() => {\n    refetch();\n  }, [refetch]);\n\n  return (\n    <Wrapper>\n      {isFetching && <Loader />}\n      {error && <NotFound data={error} status={error} />}\n\n      <DropDownList\n        options={['Alphabet A-Z', 'Alphabet Z-A', 'Date creation']}\n        label=\"Sorting by...\"\n        top=\"53px\"\n        right=\"10px\"\n        getValue={getValue}\n      />\n\n      <List>\n        {filteredContactList &&\n          filteredContactList\n            .slice(firstContentIndex, lastContentIndex)\n            .map(({ _id, name, phone, email, favorite }: IContactList) => {\n              return (\n                <Item key={_id}>\n                  <Contact\n                    id={_id}\n                    name={name}\n                    phone={phone}\n                    email={email}\n                    favorite={favorite}\n                  />\n                </Item>\n              );\n            })}\n      </List>\n\n      <Pagination\n        contentPerPage={3}\n        filteredContactList={filteredContactList}\n        gaps={gaps}\n        nextPage={nextPage}\n        page={page}\n        prevPage={prevPage}\n        setPage={setPage}\n        totalPages={totalPages}\n      />\n    </Wrapper>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Button = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 270px;\n  height: 40px;\n  margin-bottom: 50px;\n\n  background-color: var(--accent-bg-color);\n  color: var(--second-text-color);\n  font-family: inherit;\n  border: none;\n\n  cursor: pointer;\n  transition: background-color var(--main-hover-animation);\n\n  :hover,\n  :focus {\n    background-color: var(--second-bg-color);\n  }\n`;\n\nexport const ButtonText = styled.span`\n  margin-right: 10px;\n`;\n","import { Button, ButtonText } from './AddButton.styled';\nimport { BsFillPersonPlusFill } from 'react-icons/bs';\n\nconst AddButton: React.FC<{ text: string }> = ({ text }) => {\n  return (\n    <Button to=\"/contacts/add\">\n      <ButtonText>{text}</ButtonText>\n      <BsFillPersonPlusFill size={20} />\n    </Button>\n  );\n};\n\nexport default AddButton;\n","import { useGetContactsQuery } from 'redux/contacts/contact-api';\n\nimport Container from 'components/Container';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport Message from 'components/Message';\nimport AddButton from 'components/AddButton';\n\nconst ContactsPage: React.FC = () => {\n  const { data } = useGetContactsQuery();\n  const contacts = data?.data?.contacts;\n\n  return (\n    <Container title=\"Contacts\">\n      <AddButton text=\"Add new contact\" />\n      <Filter />\n      {contacts && contacts.length > 0 ? (\n        <ContactList />\n      ) : (\n        <Message message=\"Contact list is empty.\" />\n      )}\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Label","styled","Text","Input","dispatch","useAppDispatch","type","onChange","e","value","currentTarget","changeFilter","name","data","useGetContactsQuery","filter","useAppSelector","state","contacts","getFilter","filteredContactList","normalizedFilter","toLowerCase","contact","includes","filtredContacts","contentPerPage","count","useState","page","setPage","before","paginationGroup","after","gaps","setGaps","pagesInBetween","setPagesInBetween","pageCount","Math","ceil","lastContentIndex","firstContentIndex","useEffect","temp","Array","fill","map","_","i","currentLocation","indexOf","slice","changePage","direction","totalPages","nextPage","prevPage","num","arr","setValue","console","log","types","sort","a","b","createdAt","getValue","Wrapper","Button","background","Points","onClick","el","top","right","left","bottom","Header","Option","options","label","option","setOption","isOpen","setIsOpen","selectOption","textContent","prevState","item","List","Item","useFiltredContacts","isFetching","error","refetch","useSorting","usePagination","length","Loader","NotFound","status","_id","phone","email","favorite","Contact","id","Link","ButtonText","text","to","size","Container","title","Message","message"],"sourceRoot":""}