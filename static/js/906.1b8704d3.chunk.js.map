{"version":3,"file":"static/js/906.1b8704d3.chunk.js","mappings":"4MAGaA,EAAQC,EAAAA,EAAAA,GAAH,2JASLC,EAAQD,EAAAA,EAAAA,MAAH,6FAMLE,EAAaF,EAAAA,EAAAA,KAAH,sGAMVG,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,+UAoBLK,EAASL,EAAAA,EAAAA,OAAH,me,8BC1BnB,EAbqB,WACnB,IAAMM,GAAWC,EAAAA,EAAAA,KACXC,GAAWC,EAAAA,EAAAA,MAQjB,MAAO,CAAEC,aANY,SAAC,GAAqC,IACnDC,EAAO,CAAEC,MADyC,EAAlCA,MACAC,SADkC,EAA3BA,UAE7BP,EAASQ,EAAAA,EAAAA,UAAqBH,IAC9BH,EAAS,gB,mBCkCb,EAzC4B,WAC1B,IAAQE,EAAiBK,IAAjBL,aAER,OACE,iCACE,SAACX,EAAD,qBACA,SAAC,KAAD,CACEiB,cAAe,CAAEJ,MAAO,GAAIC,SAAU,IACtCI,SAAUP,EACVQ,iBAAkBC,EAAAA,GAHpB,SAKG,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,aAAcC,EAAvC,EAAuCA,aAAvC,OACC,UAAC,KAAD,CAAMN,SAAUK,EAAhB,WACE,UAACrB,EAAD,YACE,SAACC,EAAD,mCACA,SAACC,EAAD,CACEqB,KAAK,QACLC,KAAK,QACLC,SAAUL,EACVM,MAAOP,EAAOR,SAEhB,SAAC,KAAD,CAAca,KAAK,QAAQG,UAAU,YAEvC,UAAC3B,EAAD,YACE,SAACC,EAAD,8BACA,SAACC,EAAD,CACEqB,KAAK,WACLC,KAAK,WACLC,SAAUL,EACVM,MAAOP,EAAOP,YAEhB,SAAC,KAAD,CAAcY,KAAK,WAAWG,UAAU,YAE1C,SAACvB,EAAD,CAAQmB,KAAK,SAAb,SAAuBD,EAAe,MAAQ,oBC3B1D,EAR4B,WAC1B,OACE,SAACM,EAAA,EAAD,WACE,SAAC,EAAD,Q,mHCJOC,EAAgBC,EAAAA,GAAW,CACtCN,KAAMM,EAAAA,KAAaC,WAAWC,IAAI,GAAGC,IAAI,IACzCC,OAAQJ,EAAAA,KAAaC,aAGVb,EAAkBY,EAAAA,GAAW,CACxCnB,MAAOmB,EAAAA,KAAaC,WAAWpB,QAC/BC,SAAUkB,EAAAA,KAAaC,WAAWC,IAAI,GAAGC,IAAI,MAGlCE,EAAqBL,EAAAA,GAAW,CAC3CN,KAAMM,EAAAA,KAAaC,WAAWC,IAAI,GAAGC,IAAI,IACzCtB,MAAOmB,EAAAA,KAAaC,WAAWpB,QAC/BC,SAAUkB,EAAAA,KAAaC,WAAWC,IAAI,GAAGC,IAAI","sources":["components/LoginForm/LoginForm.styled.ts","hooks/useLoginUser.ts","components/LoginForm/LoginForm.tsx","pages/LoginPage.tsx","utilities/validationSchema.ts"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Title = styled.h2`\n  font-size: 26px;\n  text-transform: uppercase;\n  font-weight: 900;\n  color: var(--main-text-color);\n\n  margin-bottom: 30px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n`;\n\nexport const TitleInput = styled.span`\n  font-weight: 600;\n  color: var(--main-text-color);\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled(Field)`\n  height: 40px;\n  padding: 0 10px 0 10px;\n\n  border: 1px solid var(--second-bg-color);\n  outline: none;\n\n  color: var(--main-text-color);\n  font-size: 14px;\n\n  :focus {\n    border-color: var(--accent-bg-color);\n  }\n\n  ::placeholder {\n    font-size: 12px;\n    color: var(--main-text-color);\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 200px;\n  height: 40px;\n\n  background-color: var(--accent-bg-color);\n  color: var(--second-text-color);\n  font-family: inherit;\n  border: none;\n\n  cursor: pointer;\n  transition: background-color var(--main-hover-animation);\n\n  :hover,\n  :focus {\n    background-color: var(--second-bg-color);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 300px;\n  }\n`;\n","import { useAppDispatch } from './useAppDispatch';\nimport { useNavigate } from 'react-router-dom';\nimport operations from 'redux/auth/auth-operations';\nimport ILoginUser from 'types/ILoginUser';\n\nconst useLoginUser = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const onSubmitForm = ({ email, password }: ILoginUser) => {\n    const user = { email, password };\n    dispatch(operations.loginUser(user));\n    navigate('/contacts');\n  };\n\n  return { onSubmitForm };\n};\n\nexport default useLoginUser;\n","import { Formik, Form, ErrorMessage } from 'formik';\nimport { Title, Label, TitleInput, Input, Button } from './LoginForm.styled';\nimport useLoginUser from 'hooks/useLoginUser';\nimport { userLoginSchema } from 'utilities/validationSchema';\n\nconst LoginForm: React.FC = () => {\n  const { onSubmitForm } = useLoginUser();\n\n  return (\n    <>\n      <Title>Login</Title>\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        onSubmit={onSubmitForm}\n        validationSchema={userLoginSchema}\n      >\n        {({ values, handleChange, handleSubmit, isSubmitting }) => (\n          <Form onSubmit={handleSubmit}>\n            <Label>\n              <TitleInput>Your e-mail adress?</TitleInput>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                onChange={handleChange}\n                value={values.email}\n              />\n              <ErrorMessage name=\"email\" component=\"div\" />\n            </Label>\n            <Label>\n              <TitleInput>Your password?</TitleInput>\n              <Input\n                type=\"password\"\n                name=\"password\"\n                onChange={handleChange}\n                value={values.password}\n              />\n              <ErrorMessage name=\"password\" component=\"div\" />\n            </Label>\n            <Button type=\"submit\">{isSubmitting ? '...' : 'Login'}</Button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import Container from 'components/Container';\nimport LoginForm from 'components/LoginForm';\n\nconst LoginPage: React.FC = () => {\n  return (\n    <Container>\n      <LoginForm />\n    </Container>\n  );\n};\n\nexport default LoginPage;\n","import * as yup from 'yup';\n\nexport const contactSchema = yup.object({\n  name: yup.string().required().min(3).max(30),\n  number: yup.number().required(),\n});\n\nexport const userLoginSchema = yup.object({\n  email: yup.string().required().email(),\n  password: yup.string().required().min(7).max(14),\n});\n\nexport const userRegisterSchema = yup.object({\n  name: yup.string().required().min(3).max(30),\n  email: yup.string().required().email(),\n  password: yup.string().required().min(7).max(14),\n});\n"],"names":["Title","styled","Label","TitleInput","Input","Field","Button","dispatch","useAppDispatch","navigate","useNavigate","onSubmitForm","user","email","password","operations","useLoginUser","initialValues","onSubmit","validationSchema","userLoginSchema","values","handleChange","handleSubmit","isSubmitting","type","name","onChange","value","component","Container","contactSchema","yup","required","min","max","number","userRegisterSchema"],"sourceRoot":""}