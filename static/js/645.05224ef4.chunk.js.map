{"version":3,"file":"static/js/645.05224ef4.chunk.js","mappings":"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","sources":["utilities/getFirstLetter.ts","utilities/getRandomHexColor.ts","components/DeletingContact/DeletingContact.styled.ts","hooks/useDeletingContact.ts","components/DeletingContact/DeletingContact.tsx","utilities/dateFormatting.ts","components/ContactInformation/ContactInformation.styled.ts","components/ContactInformation/ContactInformation.tsx","components/Contact/Contact.styled.ts","components/Contact/Contact.tsx","components/Message/Message.styled.ts","components/Message/Message.tsx","components/Filter/Filter.styled.ts","components/Filter/Filter.tsx","hooks/useFiltredContacts.ts","redux/contacts/contact-selectors.ts","hooks/usePagination.ts","hooks/useSorting.ts","components/Pagination/Pagination.styled.ts","components/Pagination/Pagination.tsx","components/DropDownList/DropDownList.styled.ts","components/DropDownList/DropDownList.tsx","components/ContactList/ContactList.styled.ts","components/ContactList/ContactList.tsx","components/AddButton/AddButton.styled.ts","components/AddButton/AddButton.tsx","pages/ContactsPage.tsx"],"sourcesContent":["const getFirstLetter = (name: string) => name.slice(0, 1);\n\nexport default getFirstLetter;\n","const getRandomHexColor = () => {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n};\n\nexport default getRandomHexColor;\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  font-size: 20px;\n  margin-bottom: 30px;\n`;\n\nexport const Name = styled.span`\n  color: red;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: right;\n`;\n\nexport const Item = styled.li`\n  margin-right: 10px;\n\n  :last-child {\n    margin-right: 0;\n  }\n`;\n\nexport const ButtonCancel = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 100px;\n  height: 30px;\n\n  background-color: var(--second-bg-color);\n  color: var(--second-text-color);\n  font-family: inherit;\n  border: none;\n\n  cursor: pointer;\n  transition: background-color var(--main-hover-animation);\n\n  :hover,\n  :focus {\n    background-color: var(--accent-bg-color);\n  }\n`;\n\nexport const ButtonDelete = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 100px;\n  height: 30px;\n\n  background-color: red;\n  color: var(--second-text-color);\n  font-family: inherit;\n  border: none;\n\n  cursor: pointer;\n  transition: background-color var(--main-hover-animation);\n\n  :hover,\n  :focus {\n    background-color: var(--accent-bg-color);\n  }\n`;\n","import { useNavigate } from 'react-router-dom';\nimport { useDeleteContactMutation } from 'redux/contacts/contact-api';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst useDeletingContact = (\n  id?: string,\n  name?: string,\n  toggleModal?: () => void,\n) => {\n  const navigate = useNavigate();\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  const deleteSelectedContact = () => {\n    if (id !== undefined && toggleModal !== undefined) {\n      deleteContact(id);\n      navigate('/contacts');\n      toggleModal();\n      Notify.success(`The ${name} has been removed from your contact list.`);\n    }\n  };\n\n  return { isDeleting, deleteSelectedContact };\n};\n\nexport default useDeletingContact;\n","import {\n  Text,\n  Name,\n  List,\n  Item,\n  ButtonCancel,\n  ButtonDelete,\n} from './DeletingContact.styled';\nimport useDeletingContact from 'hooks/useDeletingContact';\nimport IDeletingContact from 'types/IDeletingContact';\n\nconst DeletingContact = ({ id, name, toggleModal }: IDeletingContact) => {\n  const { isDeleting, deleteSelectedContact } = useDeletingContact(\n    id,\n    name,\n    toggleModal,\n  );\n\n  return (\n    <>\n      <Text>\n        Are you sure you want to delete a contact <Name>{name}</Name>?\n      </Text>\n      <List>\n        <Item>\n          <ButtonCancel type=\"button\" onClick={toggleModal}>\n            Cancel\n          </ButtonCancel>\n        </Item>\n        <Item>\n          <ButtonDelete type=\"button\" onClick={deleteSelectedContact}>\n            {isDeleting ? '...' : 'Delete'}\n          </ButtonDelete>\n        </Item>\n      </List>\n    </>\n  );\n};\n\nexport default DeletingContact;\n","const dateFormatting = (date: string) => {\n  if (date) {\n    return date.slice(0, 19).replace('T', ' ');\n  }\n};\n\nexport default dateFormatting;\n","import styled from '@emotion/styled';\nimport { FaUserAlt } from 'react-icons/fa';\nimport { BsFillTelephoneFill } from 'react-icons/bs';\nimport { MdEmail } from 'react-icons/md';\nimport { IoIosStar } from 'react-icons/io';\n\nexport const Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  margin-bottom: 30px;\n`;\n\nexport const StarIcon = styled(IoIosStar)`\n  fill: #e6be0e;\n`;\n\nexport const Body = styled.div`\n  margin-bottom: 30px;\n`;\n\nexport const Property = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 100%;\n  margin-bottom: 8px;\n`;\n\nexport const Group = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Value = styled.span`\n  color: var(--accent-text-color);\n`;\n\nexport const UseerIcon = styled(FaUserAlt)`\n  margin-right: 10px;\n  color: var(--accent-text-color);\n`;\n\nexport const PhoneIcon = styled(BsFillTelephoneFill)`\n  margin-right: 10px;\n  color: var(--accent-text-color);\n`;\n\nexport const EmailIcon = styled(MdEmail)`\n  margin-right: 10px;\n  color: var(--accent-text-color);\n`;\n\nexport const Footer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n","import { useGetContactByIdQuery } from 'redux/contacts/contact-api';\nimport dateFormatting from 'utilities/dateFormatting';\n\nimport Loader from 'components/Loader';\n\nimport {\n  Header,\n  StarIcon,\n  Body,\n  Property,\n  Group,\n  Value,\n  UseerIcon,\n  PhoneIcon,\n  EmailIcon,\n  Footer,\n} from './ContactInformation.styled';\n\nconst ContactInformation: React.FC<{ id: string }> = ({ id }) => {\n  const { data, isFetching } = useGetContactByIdQuery({ contactId: id });\n  const contact = data?.data;\n\n  return (\n    <>\n      {isFetching && <Loader />}\n      {contact && (\n        <div>\n          <Header>\n            <p>\n              ID: <span>{contact._id}</span>\n            </p>\n            {contact.favorite && <StarIcon />}\n          </Header>\n\n          <Body>\n            <Property>\n              <Group>\n                <UseerIcon />\n                <p>Name:</p>\n              </Group>\n              <Value>{contact.name}</Value>\n            </Property>\n            <Property>\n              <Group>\n                <PhoneIcon />\n                <p>Phone:</p>\n              </Group>\n              <Value>{contact.phone}</Value>\n            </Property>\n            <Property>\n              <Group>\n                <EmailIcon />\n                <p>Email:</p>\n              </Group>\n              <Value>{contact.email ? contact.email : '---'}</Value>\n            </Property>\n          </Body>\n\n          <Footer>\n            <p>Created: {dateFormatting(contact.createdAt)}</p>\n            <p>Updated: {dateFormatting(contact.updatedAt)}</p>\n          </Footer>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ContactInformation;\n","import styled from '@emotion/styled';\nimport { BsFillTelephoneFill } from 'react-icons/bs';\nimport { MdEmail } from 'react-icons/md';\nimport { IoIosStar } from 'react-icons/io';\n\nexport const Wrapper = styled.div`\n  background-color: #fafafa;\n  border-radius: 10px;\n  border: 1px solid #f2f2f2;\n\n  padding: 10px;\n\n  @media screen and (min-width: 768px) {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n`;\n\nexport const Guard = styled.div`\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    width: 100%;\n  }\n`;\n\nexport const NameWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const IconUser = styled.p<{ background?: string }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  font-size: 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n\n  background-color: ${({ background }) =>\n    background ? background : 'var(--accent-bg-color)'};\n  color: var(--main-bg-color);\n\n  width: 40px;\n  height: 40px;\n  margin-right: 30px;\n`;\n\nexport const Name = styled.p`\n  font-size: 18px;\n  color: var(--main-text-color);\n`;\n\nexport const DataWrapper = styled.div`\n  margin-bottom: 15px;\n\n  @media screen and (min-width: 768px) {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    margin-bottom: 0;\n  }\n`;\n\nexport const Number = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  @media screen and (max-width: 767px) {\n    margin-bottom: 10px;\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-right: 50px;\n  }\n`;\n\nexport const NumberIcon = styled(BsFillTelephoneFill)`\n  fill: var(--accent-bg-color);\n  margin-right: 5px;\n`;\n\nexport const Email = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const EmailIcon = styled(MdEmail)`\n  fill: var(--accent-bg-color);\n  margin-right: 5px;\n`;\n\nexport const ButtonList = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n`;\n\nexport const ButtonItem = styled.li`\n  margin-right: 5px;\n\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 40px;\n  height: 30px;\n  padding: 10px;\n\n  border: none;\n  background-color: transparent;\n  color: var(--accent-bg-color);\n\n  cursor: pointer;\n  transition: color var(--main-hover-animation);\n\n  :hover,\n  :focus {\n    color: var(--second-bg-color);\n  }\n`;\n\nexport const StarIcon = styled(IoIosStar)<{ fill?: string }>`\n  fill: ${({ fill }) => (fill ? fill : '')};\n`;\n","import { useNavigate } from 'react-router-dom';\nimport useShowModal from 'hooks/useShowModal';\nimport { useChangeFavoriteMutation } from 'redux/contacts/contact-api';\n\nimport getFirstLetter from 'utilities/getFirstLetter';\nimport getRandomHexColor from 'utilities/getRandomHexColor';\nimport { IContactState } from 'types/IContact';\n\nimport { FaTrash, FaUserEdit } from 'react-icons/fa';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport Modal from 'components/Modal';\nimport DeletingContact from 'components/DeletingContact';\nimport ContactInformation from 'components/ContactInformation';\n\nimport {\n  Wrapper,\n  Guard,\n  NameWrapper,\n  IconUser,\n  Name,\n  DataWrapper,\n  Number,\n  NumberIcon,\n  Email,\n  EmailIcon,\n  ButtonList,\n  ButtonItem,\n  Button,\n  StarIcon,\n} from './Contact.styled';\n\nconst Contact = ({ id, name, phone, email, favorite }: IContactState) => {\n  const {\n    showContactInfoModal,\n    toggleContactInfoModal,\n    showDeleteContactModal,\n    toggleDeleteContactModal,\n  } = useShowModal(false);\n  const navigate = useNavigate();\n  const [changeFavorite] = useChangeFavoriteMutation();\n\n  const toggleFavorite = () => {\n    changeFavorite({ contactId: id, favorite: !favorite });\n\n    !favorite\n      ? Notify.success(`User ${name} been successfully added to favorite list.`)\n      : Notify.success(\n          `User ${name} been successfully deleted from favorite list.`,\n        );\n  };\n\n  return (\n    <>\n      {showDeleteContactModal && (\n        <Modal onClose={toggleDeleteContactModal} title={name}>\n          <DeletingContact\n            id={id}\n            name={name}\n            toggleModal={toggleDeleteContactModal}\n          />\n        </Modal>\n      )}\n\n      {showContactInfoModal && (\n        <Modal onClose={toggleContactInfoModal} title={name}>\n          <ContactInformation id={id} />\n        </Modal>\n      )}\n\n      <Wrapper>\n        <Guard onClick={toggleContactInfoModal}>\n          <NameWrapper>\n            <IconUser background={getRandomHexColor()}>\n              {getFirstLetter(name)}\n            </IconUser>\n            <Name>{name}</Name>\n          </NameWrapper>\n\n          <DataWrapper>\n            <Number>\n              <NumberIcon />\n              {phone}\n            </Number>\n            {email !== '' && (\n              <Email>\n                <EmailIcon />\n                {email}\n              </Email>\n            )}\n          </DataWrapper>\n        </Guard>\n\n        <ButtonList>\n          <ButtonItem>\n            <Button type=\"button\" onClick={toggleDeleteContactModal}>\n              <FaTrash />\n            </Button>\n          </ButtonItem>\n          <ButtonItem>\n            <Button type=\"button\" onClick={() => navigate(`edit/${id}`)}>\n              <FaUserEdit />\n            </Button>\n          </ButtonItem>\n          <ButtonItem>\n            <Button type=\"button\" onClick={toggleFavorite}>\n              {favorite ? <StarIcon fill=\"#e6be0e\" /> : <StarIcon />}\n            </Button>\n          </ButtonItem>\n        </ButtonList>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Contact;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  text-align: center;\n`;\n\nexport const Text = styled.p`\n  font-weight: 600;\n  font-size: 25px;\n`;\n","import { Wrapper, Text } from './Message.styled';\n\nconst Message: React.FC<{ message?: string }> = ({ message }) => {\n  return (\n    <Wrapper>\n      <Text>{message}</Text>\n    </Wrapper>\n  );\n};\n\nexport default Message;\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  margin-bottom: 50px;\n`;\n\nexport const Text = styled.p`\n  font-weight: 600;\n  color: var(--main-text-color);\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  width: 95%;\n  height: 40px;\n  padding: 0 10px 0 10px;\n\n  border: 1px solid var(--second-bg-color);\n  outline: none;\n\n  color: var(--main-text-color);\n  font-size: 14px;\n\n  :focus {\n    border-color: var(--accent-bg-color);\n  }\n\n  ::placeholder {\n    font-size: 12px;\n    color: var(--main-text-color);\n  }\n`;\n","import { Label, Text, Input } from './Filter.styled';\nimport { changeFilter } from 'redux/contacts/contacts-slice';\nimport { useAppDispatch } from 'hooks/useAppDispatch';\nimport React from 'react';\n\nconst Filter: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const changeFieldFilter = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <Label>\n      <Text>Find contacts by name</Text>\n      <Input type=\"text\" onChange={changeFieldFilter} name=\"filter\" />\n    </Label>\n  );\n};\n\nexport default Filter;\n","import { useGetContactsQuery } from 'redux/contacts/contact-api';\nimport { getFilter } from 'redux/contacts/contact-selectors';\nimport { useAppSelector } from './useAppSelector';\nimport { IContact } from 'types/IContact';\n\nconst useFiltredContacts = () => {\n  const { data } = useGetContactsQuery();\n  const filter = useAppSelector(state => getFilter(state));\n  const contacts = data?.data?.contacts;\n\n  const filtredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return (\n      contacts &&\n      contacts.filter((contact: { name: string }) =>\n        contact?.name?.toLowerCase().includes(normalizedFilter),\n      )\n    );\n  };\n\n  const filteredContactList: IContact[] = filtredContacts();\n\n  return { filteredContactList };\n};\n\nexport default useFiltredContacts;\n","import { RootState } from 'redux/store';\n\nexport const getFilter = (state: RootState) => state.contacts.filter;\n","import { useState, useEffect } from 'react';\nimport { IGap, IusePagination } from 'types/IPagination';\n\nconst usePagination = ({ contentPerPage, count }: IusePagination) => {\n  const [page, setPage] = useState(1);\n  const [gaps, setGaps] = useState<IGap>({\n    before: false,\n    paginationGroup: [],\n    after: true,\n  });\n  const [pagesInBetween, setPagesInBetween] = useState<number[]>([]);\n\n  const pageCount = Math.ceil(count / contentPerPage);\n  const lastContentIndex = page * contentPerPage;\n  const firstContentIndex = lastContentIndex - contentPerPage;\n\n  useEffect(() => {\n    if (pageCount > 2) {\n      const temp = new Array(pageCount - 2).fill(1).map((_, i) => i + 2);\n      setPagesInBetween(temp);\n    }\n  }, [pageCount]);\n\n  useEffect(() => {\n    const currentLocation = pagesInBetween.indexOf(page);\n    let paginationGroup = [];\n    let before = false;\n    let after = false;\n\n    if (page === 1) {\n      paginationGroup = pagesInBetween.slice(0, 3);\n    } else if (\n      page === pageCount ||\n      page === pageCount - 1 ||\n      page === pageCount - 2\n    ) {\n      paginationGroup = pagesInBetween.slice(-3, pageCount);\n    } else if (page === 2) {\n      paginationGroup = pagesInBetween.slice(\n        currentLocation,\n        currentLocation + 3,\n      );\n    } else {\n      paginationGroup = [page - 1, page, page + 1];\n    }\n\n    if (pageCount <= 5) {\n      before = false;\n      after = false;\n    } else {\n      before = false;\n      after = false;\n      if (paginationGroup[0] > 2) {\n        before = true;\n      }\n\n      if (paginationGroup[2] < pageCount - 1) {\n        after = true;\n      }\n    }\n    setGaps({ paginationGroup, before, after });\n  }, [page, pageCount, pagesInBetween]);\n\n  const changePage = (direction: boolean) => {\n    setPage(state => {\n      if (direction) {\n        if (state === pageCount) {\n          return state;\n        }\n        return state + 1;\n      } else {\n        if (state === 1) {\n          return state;\n        }\n        return state - 1;\n      }\n    });\n  };\n\n  const setPageSAFE = (num: number) => {\n    if (num > pageCount) {\n      setPage(pageCount);\n    } else if (num < 1) {\n      setPage(1);\n    } else {\n      setPage(num);\n    }\n  };\n\n  return {\n    totalPages: pageCount,\n    nextPage: () => changePage(true),\n    prevPage: () => changePage(false),\n    setPage: setPageSAFE,\n    firstContentIndex,\n    lastContentIndex,\n    page,\n    gaps,\n  };\n};\n\nexport default usePagination;\n","import { useState } from 'react';\nimport { IContact } from 'types/IContact';\n\nconst useSorting = (arr: IContact[]) => {\n  const [value, setValue] = useState<null | string>(null);\n\n  const types = {\n    DATE_CREATION: 'Date creation',\n    ALPHABET_AZ: 'Alphabet A-Z',\n    ALPHABET_ZA: 'Alphabet Z-A',\n  };\n\n  const getValue = (value: string) => setValue(value);\n\n  const sort = () => {\n    switch (value) {\n      case types.DATE_CREATION:\n        return arr.sort((a, b) => (a.createdAt > b.createdAt ? -1 : 1));\n\n      case types.ALPHABET_AZ:\n        return arr.sort((a, b) => (a.name < b.name ? -1 : 1));\n\n      case types.ALPHABET_ZA:\n        return arr.sort((a, b) => (a.name > b.name ? -1 : 1));\n\n      default:\n        return;\n    }\n  };\n\n  return { sort, getValue };\n};\n\nexport default useSorting;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Button = styled.button<{ background?: string }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 30px;\n  height: 30px;\n  margin-right: 7px;\n\n  background-color: ${({ background }) =>\n    background ? background : 'var(--accent-bg-color)'};\n  color: var(--second-text-color);\n  font-family: inherit;\n  border: none;\n\n  cursor: pointer;\n  transition: opacity var(--main-hover-animation);\n  opacity: 1;\n\n  :hover,\n  :focus {\n    opacity: 0.7;\n  }\n\n  :last-child {\n    margin-right: 0;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 40px;\n    height: 40px;\n    margin-right: 15px;\n  }\n`;\n\nexport const Points = styled.p`\n  margin-right: 7px;\n\n  @media screen and (min-width: 768px) {\n    margin-right: 15px;\n  }\n`;\n","import { IPagination } from 'types/IPagination';\nimport { Button, Wrapper, Points } from './Pagination.styled';\nimport { HiArrowNarrowLeft, HiArrowNarrowRight } from 'react-icons/hi';\n\nconst Pagination: React.FC<IPagination> = ({\n  contentPerPage,\n  filteredContactList,\n  prevPage,\n  page,\n  setPage,\n  gaps,\n  totalPages,\n  nextPage,\n}) => {\n  return (\n    <Wrapper>\n      <Button onClick={prevPage}>\n        <HiArrowNarrowLeft />\n      </Button>\n\n      {page === 1 ? (\n        <Button background=\"#000000\" onClick={() => setPage(1)}>\n          1\n        </Button>\n      ) : (\n        <Button onClick={() => setPage(1)}>1</Button>\n      )}\n\n      {gaps.before ? <Points>...</Points> : null}\n      {gaps.paginationGroup.map((el: number) =>\n        page === el ? (\n          <Button background=\"#000000\" onClick={() => setPage(el)} key={el}>\n            {el}\n          </Button>\n        ) : (\n          <Button onClick={() => setPage(el)} key={el}>\n            {el}\n          </Button>\n        ),\n      )}\n      {gaps.after ? <Points>...</Points> : null}\n\n      {page === totalPages ? (\n        <Button background=\"#000000\" onClick={() => setPage(totalPages)}>\n          {totalPages}\n        </Button>\n      ) : (\n        <Button onClick={() => setPage(totalPages)}>{totalPages}</Button>\n      )}\n\n      <Button onClick={nextPage}>\n        <HiArrowNarrowRight />\n      </Button>\n    </Wrapper>\n  );\n};\n\nexport default Pagination;\n","import styled from '@emotion/styled';\nimport { IWrapper } from 'types/IDropDownList';\n\nexport const Wrapper = styled.div<IWrapper>`\n  width: 100%;\n\n  border: 1px solid var(--second-bg-color);\n  color: var(--main-text-color);\n\n  cursor: default;\n  overflow: hidden;\n  z-index: 99;\n\n  @media screen and (max-width: 767px) {\n    margin-bottom: 30px;\n  }\n\n  @media screen and (min-width: 768px) {\n    position: absolute;\n    top: ${({ top }) => (top ? top : '')};\n    right: ${({ right }) => (right ? right : '')};\n    left: ${({ left }) => (left ? left : '')};\n    bottom: ${({ bottom }) => (bottom ? bottom : '')};\n\n    width: 270px;\n  }\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  padding: 10px;\n`;\n\nexport const Option = styled.div`\n  background-color: #fafafa;\n  padding: 10px;\n\n  transition: background var(--main-hover-animation),\n    color var(--main-hover-animation);\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    background: var(--accent-bg-color);\n    color: var(--second-text-color);\n  }\n`;\n","import { useState } from 'react';\nimport { IoMdArrowDropdown, IoMdArrowDropup } from 'react-icons/io';\n\nimport { IDropDownListState } from 'types/IDropDownList';\nimport { Wrapper, Header, Option } from './DropDownList.styled';\n\nconst DropDownList: React.FC<IDropDownListState> = ({\n  options,\n  label,\n  top,\n  bottom,\n  left,\n  right,\n  getValue,\n}) => {\n  const [option, setOption] = useState<null | string>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const selectOption = (e: React.MouseEvent<HTMLParagraphElement>) => {\n    const value = e.currentTarget.textContent;\n    setOption(value);\n    getValue(value as string);\n  };\n\n  const toogle = () => setIsOpen(prevState => !prevState);\n\n  return (\n    <Wrapper top={top} bottom={bottom} left={left} right={right}>\n      <div onClick={toogle}>\n        <Header>\n          <p>{option ? option : label}</p>\n          {isOpen ? <IoMdArrowDropup /> : <IoMdArrowDropdown />}\n        </Header>\n        {isOpen && (\n          <div>\n            {options.map(item => (\n              <Option key={item} onClick={selectOption}>\n                {item}\n              </Option>\n            ))}\n          </div>\n        )}\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default DropDownList;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const List = styled.ul`\n  width: 100%;\n`;\n\nexport const Item = styled.li`\n  margin-bottom: 20px;\n`;\n","import { useEffect } from 'react';\nimport { useGetContactsQuery } from 'redux/contacts/contact-api';\nimport useFiltredContacts from 'hooks/useFiltredContacts';\nimport usePagination from 'hooks/usePagination';\nimport useSorting from 'hooks/useSorting';\n\nimport Contact from 'components/Contact/Contact';\nimport Loader from 'components/Loader';\nimport NotFound from 'components/NotFound';\nimport Pagination from 'components/Pagination';\nimport DropDownList from 'components/DropDownList';\n\nimport { IContactList } from 'types/IContactList';\nimport { Wrapper, List, Item } from './ContactList.styled';\n\nconst ContactList: React.FC<{}> = () => {\n  const { filteredContactList } = useFiltredContacts();\n  const { isFetching, error, refetch } = useGetContactsQuery();\n  const { sort, getValue } = useSorting(filteredContactList);\n  const {\n    firstContentIndex,\n    lastContentIndex,\n    gaps,\n    nextPage,\n    page,\n    prevPage,\n    setPage,\n    totalPages,\n  } = usePagination({\n    contentPerPage: 10,\n    count: filteredContactList.length,\n  });\n\n  sort();\n\n  useEffect(() => {\n    refetch();\n  }, [refetch]);\n\n  return (\n    <Wrapper>\n      {isFetching && <Loader />}\n      {error && <NotFound data={error} status={error} />}\n\n      <DropDownList\n        options={['Alphabet A-Z', 'Alphabet Z-A', 'Date creation']}\n        label=\"Sorting by...\"\n        top=\"53px\"\n        right=\"10px\"\n        getValue={getValue}\n      />\n\n      <List>\n        {filteredContactList &&\n          filteredContactList\n            .slice(firstContentIndex, lastContentIndex)\n            .map(({ _id, name, phone, email, favorite }: IContactList) => {\n              return (\n                <Item key={_id}>\n                  <Contact\n                    id={_id}\n                    name={name}\n                    phone={phone}\n                    email={email}\n                    favorite={favorite}\n                  />\n                </Item>\n              );\n            })}\n      </List>\n\n      {filteredContactList && filteredContactList.length > 9 && (\n        <Pagination\n          contentPerPage={3}\n          filteredContactList={filteredContactList}\n          gaps={gaps}\n          nextPage={nextPage}\n          page={page}\n          prevPage={prevPage}\n          setPage={setPage}\n          totalPages={totalPages}\n        />\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Button = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 270px;\n  height: 40px;\n  margin-bottom: 50px;\n\n  background-color: var(--accent-bg-color);\n  color: var(--second-text-color);\n  font-family: inherit;\n  border: none;\n\n  cursor: pointer;\n  transition: background-color var(--main-hover-animation);\n\n  :hover,\n  :focus {\n    background-color: var(--second-bg-color);\n  }\n`;\n\nexport const ButtonText = styled.span`\n  margin-right: 10px;\n`;\n","import { Button, ButtonText } from './AddButton.styled';\nimport { BsFillPersonPlusFill } from 'react-icons/bs';\n\nconst AddButton: React.FC<{ text: string }> = ({ text }) => {\n  return (\n    <Button to=\"/contacts/add\">\n      <ButtonText>{text}</ButtonText>\n      <BsFillPersonPlusFill size={20} />\n    </Button>\n  );\n};\n\nexport default AddButton;\n","import { useGetContactsQuery } from 'redux/contacts/contact-api';\n\nimport Container from 'components/Container';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport Message from 'components/Message';\nimport AddButton from 'components/AddButton';\n\nconst ContactsPage: React.FC = () => {\n  const { data } = useGetContactsQuery();\n  const contacts = data?.data?.contacts;\n\n  return (\n    <Container title=\"Contacts\">\n      <AddButton text=\"Add new contact\" />\n      <Filter />\n      {contacts && contacts.length > 0 ? (\n        <ContactList />\n      ) : (\n        <Message message=\"Contact list is empty.\" />\n      )}\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["name","slice","Math","floor","random","toString","Text","styled","Name","List","Item","ButtonCancel","ButtonDelete","id","toggleModal","navigate","useNavigate","useDeleteContactMutation","deleteContact","isDeleting","isLoading","deleteSelectedContact","undefined","Notify","useDeletingContact","type","onClick","date","replace","Header","StarIcon","IoIosStar","Body","Property","Group","Value","UseerIcon","FaUserAlt","PhoneIcon","BsFillTelephoneFill","EmailIcon","MdEmail","Footer","useGetContactByIdQuery","contactId","data","isFetching","contact","Loader","_id","favorite","phone","email","dateFormatting","createdAt","updatedAt","Wrapper","Guard","NameWrapper","IconUser","background","DataWrapper","Number","NumberIcon","Email","ButtonList","ButtonItem","Button","fill","useShowModal","showContactInfoModal","toggleContactInfoModal","showDeleteContactModal","toggleDeleteContactModal","useChangeFavoriteMutation","changeFavorite","Modal","onClose","title","getRandomHexColor","getFirstLetter","message","Label","Input","dispatch","useAppDispatch","onChange","e","value","currentTarget","changeFilter","useGetContactsQuery","filter","useAppSelector","state","contacts","getFilter","filteredContactList","normalizedFilter","toLowerCase","includes","filtredContacts","contentPerPage","count","useState","page","setPage","before","paginationGroup","after","gaps","setGaps","pagesInBetween","setPagesInBetween","pageCount","ceil","lastContentIndex","firstContentIndex","useEffect","temp","Array","map","_","i","currentLocation","indexOf","changePage","direction","totalPages","nextPage","prevPage","num","arr","setValue","types","sort","a","b","getValue","Points","el","top","right","left","bottom","Option","options","label","option","setOption","isOpen","setIsOpen","selectOption","textContent","prevState","item","useFiltredContacts","error","refetch","useSorting","usePagination","length","NotFound","status","Contact","Link","ButtonText","text","to","size","Container","Message"],"sourceRoot":""}